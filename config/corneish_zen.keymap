#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DFLT 0
#define NUM 1
#define NAV 2

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
  macros {
    vim_save: vim_save {
      label = "ZM_vim_save";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp ESC &kp COLON &kp W &kp RET>;
    };
  }
}

/ {
  behaviors {
    i3_float: i3_float {
      compatible = "zmk,behavior-tap-dance";
      label = "I3_FLOAT";
      #binding-cells = <0>;
      bindings = <&none>, <&kp LALT(LCTRL(F))>;
    };
  };
}

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// --------------------------------------------------------------------------------------------
// |  TAB       |  Q  |  W  |  E   |   R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | vim_save |
// | CTRL / ESC |  A  |  S  |  D   |   F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '       |
// | SHFT       |  Z  |  X  |  C   |   V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  \       |
//                    | NAV | BSPC | LALT |               | ENT  | SPACE | NUM |
                        bindings = <
   &kp TAB       &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp &vim_save
   &mt LCTRL ESC &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT     &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                  &mo NAV &kp BSPC &kp LALT    &kp RET &kp SPACE &mo NUM
                        >;
                };
                lower_layer {
                        label = "NUMBER";
// -------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | kitty_shell |
// | DFLT |  1  |  2  |  3  |  4  |  5  |   |  -  |  =  |  x  |  [  |  ]  |  T          |
// | SHFT |  6  |  7  |  8  |  9  |  0  |   |  +  |  :  |  ,  |  .  |  /  |  Z          |
//                    | NAV | BSPC | LALT |               | ENT  | SPACE |     |
                        bindings = <
   &kp TAB    &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT      &kp N6    &kp N7    &kp N8    &kp N9   &kp N0   &kp LCTRL(LSHFT(ESC))
   &to DFLT   &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp MINUS &kp EQUAL &kp x     &kp LBKT &kp RBKT &kp LS(T)
   &kp LSHFT  &kp N6       &kp N7       &kp N8       &kp N9       &kp N0         &kp PLUS  &kp COLON &kp COMMA &kp DOT  &kp FLSH &kp LS(Z)
                          	        &to NAV      &kp BSPC &kp LALT         &kp RET  &kp SPACK  &none
                        >;
                };

                raise_layer {
                        label = "NAV";
// ----------------------------------------------------------------------------------------
// | RESET    |      | LCLK | MCLK | RCLK |     |   | MvL | MvU | MvD | MvR | NTB  | HOME |
// | DFLT     | WS1  | WS2  | WS3  | WS4  | WS5 |   | LEFT| UP  | DWN | RGHT| NxTB | PgUP |
// | SHFT     | WS6  | WS7  | WS8  | WS9  | FLT |   |     |     |     |     | PvTB | PgDn |
//                    |     | BSPC | LALT |               | ENT  | SPACE | NUM |
                        bindings = <
   &bootloader &none       &none       &none       &none       &none          &kp LALT(LEFT) &kp LALT(UP)  &kp LALT(DOWN)  &kp LALT(RIGHT) &kp LCTRL(LSHFT(T))     &kp HOME
   &kp LCTRL   &kp LALT(1) &kp LALT(2) &kp LALT(3) &kp LALT(4) &kp LALT(5)    &kp LEFT       &kp UP        &kp DOWN        &kp RIGHT       &kp LCTRL(LSHFT(RIGHT)) &kp PG_UP
   &kp LSHFT   &kp LALT(6) &kp LALT(7) &kp LALT(8) &kp LALT(9) &i3_float      &none          &none         &none           &none           &kp LCTRL(LSHFT(LEFT))  &kp PG_DN
                    	     &none    &kp BSPC &kp LALT                         &kp RET   &kp SPACE &to NUM 
                        >;
                };
        };
};

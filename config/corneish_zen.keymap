#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DFLT 0
#define NUM 1
#define NAV 2
#define COLEMK 3

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS) \
  combo_##NAME { \
    timeout-ms = <30>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <LAYERS>; \
  };

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
    //zmk,matrix_transform = &five_column_transform;
  };
};

/ {
  macros {
    vim_save: vim_save {
      label = "ZM_vim_save";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp ESC &kp COLON &kp W &kp RET>;
    };
    macro_pound_lbrace: macro_pound_lbrace {
      label = "ZM_pound_lbrace";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp POUND &kp LBRC>;
    };
    macro_ex_pipe: macro_ex_pipe {
      label = "ZM_ex_pipe";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp PIPE &kp LS(DOT) &kp SPACE>;
    };
    macro_rarrow: macro_rarrow {
      label = "ZM_rarrow";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp LS(COMMA) &kp MINUS &kp SPACE>;
    };
    macro_ex_map: macro_ex_map {
      label = "ZM_ex_map";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp PRCNT &kp LBRC>;
    };
    macro_fat_arrow: macro_fat_arrow {
      label = "ZM_fat_arrow";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp EQUAL &kp LS(DOT) &kp SPACE>;
    };
    macro_arrow: macro_arrow {
      label = "ZM_arrow";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
        = <&macro_tap &kp MINUS &kp LS(DOT) &kp SPACE>;
    };
    macro_lpar_dqt: macro_lpar_dqt {
      label = "ZM_lpar_dqt";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp LPAR &kp DQT>;
    };
    macro_dqt_rpar: macro_dqt_rpar {
      label = "ZM_dqt_rpar";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&macro_tap &kp DQT &kp RPAR>;
    };
  };
};

/ {
  behaviors {
    i3_float: i3_float {
      compatible = "zmk,behavior-tap-dance";
      label = "I3_FLOAT";
      #binding-cells = <0>;
      bindings = <&none>, <&kp LG(LS(F))>;
    };
    bt_one: bt_one {
      compatible = "zmk,behavior-tap-dance";
      label = "BT_ONE";
      #binding-cells = <0>;
      bindings = <&none>, <&bt BT_SEL 0>;
    };
    bt_two: bt_two {
      compatible = "zmk,behavior-tap-dance";
      label = "BT_TWO";
      #binding-cells = <0>;
      bindings = <&none>, <&bt BT_SEL 1>;
    };
    bt_three: bt_three {
      compatible = "zmk,behavior-tap-dance";
      label = "BT_THREE";
      #binding-cells = <0>;
      bindings = <&none>, <&bt BT_SEL 2>;
    };
    bt_four: bt_four {
      compatible = "zmk,behavior-tap-dance";
      label = "BT_FOUR";
      #binding-cells = <0>;
      bindings = <&none>, <&bt BT_SEL 3>;
    };
    vim_save_td: vim_save_td {
      compatible = "zmk,behavior-tap-dance";
      label = "VIM_SAVE";
      #binding-cells = <0>;
      bindings = <&none>, <&vim_save>;
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";
    COMBO(plus, &kp PLUS, 31 33, DFLT)
    COMBO(amp, &kp AMPS, 30 31 32, DFLT)
    COMBO(pound, &kp POUND, 6 7 8, DFLT)
    COMBO(pound_lbrace, &macro_pound_lbrace, 26 27 28, DFLT)
    COMBO(ex_pipe, &macro_ex_pipe, 27 28, DFLT)
    COMBO(rarrow, &macro_rarrow, 26 27, DFLT)
    COMBO(lbkt, &kp LBKT, 30 31, DFLT)
    COMBO(rbkt, &kp RBKT, 30 32, DFLT)
    COMBO(vim_lastb, &kp LC(N6), 25 26, DFLT)
    COMBO(ex_map, &macro_ex_map, 14 15 16, DFLT)
    COMBO(fat_arrow, &macro_fat_arrow, 15 16, DFLT)
    COMBO(arrow, &macro_arrow, 14 15, DFLT)
    COMBO(percent, &kp PRCNT, 16 17, DFLT)
    COMBO(underscore, &kp UNDERSCORE, 19 20, DFLT)
    COMBO(lbrc, &kp LBRC, 18 19, DFLT)
    COMBO(rbrc, &kp RBRC, 18 20, DFLT)
    COMBO(equal, &kp EQUAL, 19 21, DFLT)
    COMBO(lparen, &kp LPAR, 19 31, DFLT)
    COMBO(rparen, &kp RPAR, 20 32, DFLT)
    COMBO(minus, &kp MINUS, 19 20 21, DFLT)
    COMBO(dquote, &kp DQT, 19 23, DFLT)
    COMBO(at, &kp AT_SIGN, 18 19 20, DFLT)
    COMBO(grave, &kp GRAVE, 1 2, DFLT)
    COMBO(tilde, &kp TILDE, 1 2 3, DFLT)
    COMBO(kitty_title, &kp LA(LC(LS(T))), 9 10, NAV)
    COMBO(colemak, &to COLEMK, 11 23 35, DFLT)
    COMBO(qwerty, &to DFLT, 11 23 35, COLEMK)
    COMBO(lpar_dqt, &macro_lpar_dqt, 31 32, DFLT COLEMK)
    COMBO(dqt_rpar, &macro_dqt_rpar, 32 33, DFLT COLEMK)
    COMBO(n1, &kp N1, 1 13, DFLT)
    COMBO(n2, &kp N2, 2 14, DFLT)
    COMBO(n3, &kp N3, 3 15, DFLT)
    COMBO(n4, &kp N4, 4 16, DFLT)
    COMBO(n5, &kp N5, 5 17, DFLT)
    COMBO(n6, &kp N6, 6 18, DFLT)
    COMBO(n7, &kp N7, 7 19, DFLT)
    COMBO(n8, &kp N8, 8 20, DFLT)
    COMBO(n9, &kp N9, 9 21, DFLT)
    COMBO(n0, &kp N0, 10 22, DFLT)
  };
};
// Key position map for combos
// -----------------------------------------------------------------
// |  0 |  1 |  2 |  3 |  4 |  5 |   |  6 |  7 |  8 |  9 | 10 | 11 |
// | 12 | 13 | 14 | 15 | 16 | 17 |   | 18 | 19 | 20 | 21 | 22 | 23 |
// | 24 | 25 | 26 | 27 | 28 | 29 |   | 30 | 31 | 32 | 33 | 34 | 35 |
//                | 36 | 37 | 38 |   | 39 | 40 | 41 |

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        label = "QWERTY";
// ----------------------------------------------------------------------------------------------------------
// | TAB        |  Q    |  W    |  E     |   R   |  T    |   |  Y    |  U    |  I    |    O  |    P  | save |
// | CTRL / ESC |  A    |  S    |  D     |   F   |  G    |   |  H    |  J    |    K  |    L  |    ;  |  '   |
// | SHFT       |  Z    |    X  |    C   |   V   |  B    |   |  N    |  M    |  ,    |  .    |  /    |  \   |
//                    |  NAV  | BSPC  | LALT  |               | ENT  | SPACE | NUM |
                        bindings = <
   &kp TAB       &kp Q   &kp W   &kp E    &kp R   &kp T       &kp Y   &kp U    &kp I  &kp O    &kp P    &vim_save_td
   &mt LCTRL ESC &kp A   &kp S   &kp D    &kp F   &kp G       &kp H   &kp J    &kp K  &kp L    &kp SEMI &kp SQT
   &kp LSHFT     &kp Z   &kp X   &kp C    &kp V   &kp B       &kp N   &kp M    &kp COMMA &kp DOT &kp FSLH &kp BSLH
                       &mo NAV   &kp BSPC   &kp LMETA          &kp RET &kp SPACE &mo NUM
                        >;
                };

                lower_layer {
                        label = "NUMBER";
// -------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | kitty_shell |
// | DFLT |  1  |  2  |  3  |  4  |  5  |   |  -  |  =  |  x  |  [  |  ]  |  T          |
// | SHFT |  6  |  7  |  8  |  9  |  0  |   |  +  |  :  |  ,  |  .  |  /  |  Z          |
//                    | NAV | BSPC | LALT |               | ENT  | SPACE |     |
                        bindings = <
   &kp TAB    &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT      &kp CARET &kp AMPS  &kp STAR  &kp LPAR &kp RPAR &kp LC(LS(ESC))
   &to DFLT   &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp MINUS &kp EQUAL &kp X     &kp LBKT &kp RBKT &kp LS(T)
   &kp LSHFT  &kp N6       &kp N7       &kp N8       &kp N9       &kp N0         &kp PLUS  &kp COLON &kp COMMA &kp DOT  &kp FSLH &kp LS(Z)
                          	        &to NAV      &kp BSPC &kp LMETA         &kp RET  &kp SPACE  &none
                        >;
                };

                raise_layer {
                        label = "NAV";
// ----------------------------------------------------------------------------------------
// | RESET    |      | LCLK | MCLK | RCLK |     |   | MvL | MvU | MvD | MvR | NTB  | HOME |
// | DFLT     | WS1  | WS2  | WS3  | WS4  | WS5 |   | LEFT| UP  | DWN | RGHT| NxTB | PgUP |
// | SHFT     | WS6  | WS7  | WS8  | WS9  | FLT |   |     |     |     |     | PvTB | PgDn |
//                    |     | BSPC | LALT |               | ENT  | SPACE | NUM |
                        bindings = <
   &none       &none      &bt_one    &bt_two    &bt_three  &bt_four      &kp LG(LEFT) &kp LG(UP) &kp LG(DOWN) &kp LG(RIGHT) &kp LC(LS(T))     &kp HOME
   &kp DFLT    &kp LG(N1) &kp LG(N2) &kp LG(N3) &kp LG(N4) &kp LG(N5)    &kp LEFT     &kp DOWN   &kp UP       &kp RIGHT     &kp LC(LS(RIGHT)) &kp PG_UP
   &kp LSHFT   &kp LG(N6) &kp LG(N7) &kp LG(N8) &kp LG(N9) &i3_float     &none        &none      &none        &none         &kp LC(LS(LEFT))  &kp PG_DN
                    	     &none    &kp BSPC &kp LMETA                         &kp RET   &kp SPACE &to NUM 
                        >;
                };

                colemak_layer {
                        label = "COLEMK";
// --------------------------------------------------------------------------------------------
// |  TAB       |  Q  |  W  |  F   |   P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  | vim_save |
// | CTRL / ESC |  A  |  R  |  S   |   T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '       |
// | SHFT       |  Z  |  X  |  C   |   D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |  \       |
//                    | NAV | BSPC | LALT |               | ENT  | SPACE | NUM |
                        bindings = <
   &kp TAB       &kp Q &kp W &kp F &kp P &kp B   &kp J &kp L  &kp U     &kp Y   &kp SEMI &vim_save
   &mt LCTRL ESC &kp A &kp R &kp S &kp T &kp G   &kp M &kp N  &kp E     &kp I   &kp O    &kp SQT
   &kp LSHFT     &kp Z &kp X &kp C &kp D &kp V   &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp BSLH
                  &mo NAV &kp BSPC &kp LMETA    &kp RET &kp SPACE &mo NUM
                        >;
                };
        };
};
